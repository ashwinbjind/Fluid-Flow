import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation

def classify_flow(density, velocity, diameter, viscosity):
    reynolds_number = (density * velocity * diameter) / viscosity

    if reynolds_number < 2000:
        flow_type = "Laminar"
    elif 2000 <= reynolds_number <= 4000:
        flow_type = "Transitional"
    else:
        flow_type = "Turbulent"

    return reynolds_number, flow_type

def animate_flow(flow_type):
    fig, ax = plt.subplots(figsize=(8, 4))
    ax.set_xlim(0, 2 * np.pi)
    ax.set_ylim(-2, 2)
    ax.set_title(f"{flow_type} Flow Visualization", fontsize=14)
    ax.set_xlabel("Pipe Length")
    ax.set_ylabel("Velocity Profile")

    x = np.linspace(0, 2 * np.pi, 1000)
    y = np.zeros_like(x)
    line, = ax.plot(x, y, lw=2, color='blue')

    def update(frame):
        if flow_type == "Laminar":
            y = np.sin(x - 0.1 * frame)
        elif flow_type == "Transitional":
            y = np.sin(x - 0.1 * frame) * (1 + 0.3 * np.sin(3 * x + 0.2 * frame))
        else:  # Turbulent
            noise = 0.5 * (np.random.rand(len(x)) - 0.5)
            y = np.sin(x - 0.1 * frame) + noise
        line.set_ydata(y)
        return line,

    ani = animation.FuncAnimation(fig, update, frames=200, interval=50, blit=True)
    plt.show()

def main():
    print("=== Fluid Flow Classification with Animation ===")
    
    try:
        density = float(input("Enter fluid density (kg/m³): "))
        velocity = float(input("Enter flow velocity (m/s): "))
        diameter = float(input("Enter pipe diameter (m): "))
        viscosity = float(input("Enter dynamic viscosity (Pa·s): "))

        re, flow = classify_flow(density, velocity, diameter, viscosity)

        print(f"\nReynolds Number: {re:.2f}")
        print(f"Flow Type: {flow}")

        animate_flow(flow)

    except ValueError:
        print("❌ Invalid input. Please enter numeric values.")

if __name__ == "__main__":
    main()
